<?xml version="1.0" encoding="utf-8"?>
<device label="XBee Serial Terminal">
  <driver>devices.xbee.xbee_devices.xbee_serial_terminal:XBeeSerialTerminal</driver>
  <is_virtual>false</is_virtual>
  <is_xbee>true</is_xbee>
  <is_thread>false</is_thread>
  <is_sleep>false</is_sleep>
  <is_sample_rate>false</is_sample_rate>
  <description>XBee Serial Terminal is meant to be an example driver that shows how to use the 'xbee_serial' driver.  It requires to connect the XBee serial device to a different serial port, say COM1/COM2 on your PC, with a crossover cable.</description>
  <generic_name>xbee_serial_terminal</generic_name>
  <icon>icons/xbee_serial_terminal.png</icon>
  <help_url>user/devices/xbee/xbee_devices/serial_terminal.html</help_url>
  <settings>
    <setting label="XBee Device Manager">
      <type>string</type>
      <required>true</required>
      <tooltip>Must be set to the name of an XBeeDeviceManager instance.</tooltip>
      <yml_field>xbee_device_manager</yml_field>
      <dependence type="value">
        <depend_element>devices.xbee.xbee_device_manager.xbee_device_manager:XBeeDeviceManager</depend_element>
        <depends_on>value</depends_on>
        <new_value>elementName</new_value>
      </dependence>
    </setting>
    <setting label="MAC Address">
      <type>mac</type>
      <required>true</required>
      <tooltip>The extended address of the XBee Sensor device you would like to monitor.</tooltip>
      <yml_field>extended_address</yml_field>
      <pattern>([\da-fA-F]{2}:){7}[\da-fA-F]{2}!</pattern>
      <pattern_example>01:23:45:67:89:ab:cd:ef!</pattern_example>
    </setting>
    <setting label="Baud rate">
      <type>combo</type>
      <required>false</required>
      <items>
        <item>1200</item>
        <item>2400</item>
        <item>4800</item>
        <item>9600</item>
        <item>19200</item>
        <item>38400</item>
        <item>57600</item>
        <item>115200</item>
      </items>
      <default>9600</default>
      <tooltip>Predictable baud rates are from 1200 through 115200. If not set, the default value of 9600 will be used.
        Note that some Xbee technology can approximate baud rates from 8 to 921600 baud, but you may require external hardware and programming knowledge to make use of these values.
      </tooltip>
      <yml_field>baudrate</yml_field>
    </setting>
    <setting label="Parity">
      <type>combo</type>
      <required>false</required>
      <items>
        <item>none</item>
        <item>even</item>
        <item>odd</item>
        <item>mark</item>
      </items>
      <default>none</default>
      <tooltip>Acceptable parity values are the follow strings:
        none
        even
        odd
        mark
      </tooltip>
      <yml_field>parity</yml_field>
    </setting>
    <setting label="Stop bits">
      <type>combo</type>
      <required>false</required>
      <items>
        <item>1</item>
        <item>2</item>
      </items>
      <default>1</default>
      <tooltip>Acceptable stopbit values are:
        1
        2

        Not all XBee technologies support setting the stop bit value. In these cases, the stop bit will always be 1.</tooltip>
      <yml_field>stopbits</yml_field>
    </setting>
    <setting label="Hardware Flow control">
      <type>combo</type>
      <required>false</required>
      <items>
        <item>False</item>
        <item>True</item>
        <item>RTS</item>
        <item>CTS</item>
        <item>485</item>
      </items>
      <default>False</default>
      <tooltip>Acceptable hardware flow control values are:

        True: Will enable full RTS/CTS flow control. (D6=1, D7=1)
        False: Will turn OFF RTS/CTS flow control. (D6=0, D7=0)
        RTS: Will enable DCE-RTS input only.  Disables CTS. (D6=1, D7=0)
        CTS: Will enable DCE-CTS output only.  Disables RTS. (D6=0, D7=1)
        485: Will enable RS-485 duplex control within the XBee. (D6=0, D7=7)

        Do not use full RTS/CTS flow control with DigiMesh.
      </tooltip>
      <yml_field>hardwareflowcontrol</yml_field>
    </setting>
    <setting label="Hexadecimal Encoding">
      <type>boolean</type>
      <required>false</required>
      <default>False</default>
      <tooltip>If True, assumes WRITE channel data is a well-formed hexadecimal string, which is converted to binary for serial transmission, plus any serial data received is converted back to a hexadecimal string before updating to the READ channel. If False, makes no change to READ/WRITE channel data.</tooltip>
      <yml_field>hexadecimal</yml_field>
    </setting>
    <setting label="End-Of-Line Pattern">
      <type>string</type>
      <required>false</required>
      <default>''</default>
      <tooltip>A string which is appended to every message sent by serial, and stripped from the end of every message received by serial.  The 'eoln' value being detected will also cause an end-of-message, over-riding the char_timeout.  Only the escape sequences \r, \n and \xXX are handled, with 'XX' being exactly 2 hexadecimal characters only.  All other characters are handled without change.</tooltip>
      <yml_field>eoln</yml_field>
    </setting>
    <setting label="EOM Detech Character Timeout">
      <type>float</type>
      <required>false</required>
      <default>1.0</default>
      <tooltip>In seconds.  Since incoming data may be 'fragmented' due to either slow human finger-typing or Xbee maximum packet sizes, this driver uses a simple idle timer to detect End-of-Message (EOM).  The value can be set to anything 0.25 seconds or higher.  Setting to 0.0 disables this feature, causing the READ channel to be rewritten with every incoming data sample.</tooltip>
      <yml_field>char_timeout</yml_field>
    </setting>
  </settings>
</device>